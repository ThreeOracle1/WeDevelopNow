<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox4.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>